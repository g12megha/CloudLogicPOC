'use strict';
process.env.NO_DEPRECATION = 'express-session';

var https = require('https');
var connect = require('./lib/connect/connect');
var passport = require('passport');
var path = require('path');
var session = require('express-session');
var xsenv = require('sap-xsenv');

var agents = require('./lib/backend-request/agents');
var additionalHeadersMiddleware = require('./lib/middleware/additional-headers-middleware');
var appConfig = require('./lib/configuration/app-config');
var authorizationMiddleware = require('./lib/middleware/authorization-middleware');
var compressionMiddleware = require('./lib/middleware/compression-middleware');
var cookieUtils = require('./lib/utils/cookie-utils');
var environment = require('./lib/environment');
var environmentConfig = require('./lib/configuration/env-config');
var errorHandler = require('./lib/middleware/error-handler');
var loginMiddleware = require('./lib/middleware/login-middleware');
var logging = require('./lib/utils/logger');
var logoutMiddleware = require('./lib/middleware/logout-middleware');
var memstoreConfig = require('./lib/configuration/memstore-config');
var pathRewritingMiddleware = require('./lib/middleware/path-rewriting-middleware');
var passportMiddleware = require('./lib/middleware/passport-middleware');
var pluginEndpointMiddleware = require('./lib/middleware/plugin-middleware');
var jwtRefreshMiddleware = require('./lib/middleware/jwt-refresh-middleware');
var requestHandler = require('./lib/middleware/request-handler');
var staticResourceHandler = require('./lib/middleware/static-resource-handler');
var secureCookieMiddleware = require('./lib/middleware/secure-cookie-middleware');
var sessionCookieMiddleware = require('./lib/middleware/session-cookie-middleware');
var traceRequestMiddleware = require('./lib/middleware/trace-request-middleware');
var welcomePageMiddleware = require('./lib/middleware/welcome-page-middleware');
var xsrfTokenMiddleware = require('./lib/middleware/xsrf-token-middleware');
var uaaUtils = require('./lib/utils/uaa-utils');
var urlCheckMiddleware = require('./lib/middleware/url-check-middleware');
var whitelistServiceMiddleware = require('./lib/middleware/whitelist-service-middleware');

module.exports = function configuration(parameters) {
  var certificates = xsenv.loadCertificates();
  agents.httpsAgent.options.ca = certificates;
  https.globalAgent.options.ca = certificates;

  var workingDir = environment.getWorkingDirectory(path.join(__dirname, '..', '..'), __dirname, parameters.workingDir);
  var destinations = environmentConfig.loadDestinations(path.join(workingDir, 'local-destinations.json'));
  var environmentSettings = environmentConfig.loadEnvironment();
  var uaaOptions = uaaUtils.getOptions(environment.getLocalServiceConfigPath(workingDir));
  var routerConfig = {
    serverPort: environment.getPort(parameters.port),
    workingDir: workingDir,
    destinations: destinations,
    sessionTimeout: environmentSettings.sessionTimeout,
    sendXFrameOptions: environmentSettings.sendXFrameOptions,
    uaaOptions: uaaOptions,
    jwtRefresh: environmentSettings.jwtRefresh,
    appConfig: appConfig.loadConfiguration(workingDir, 'xs-app.json', destinations),
    plugins: environmentConfig.loadPlugins(path.join(workingDir, 'local-plugins.json')),
    additionalHeaders: environmentConfig.loadAdditionalHeaders(path.join(workingDir, 'local-http-headers.json')),
    clickjackCheckWhitelist: environmentConfig.loadClickjackCheckWhitelist()
  };
  if (!routerConfig.sessionTimeout) {
    routerConfig.sessionTimeout = routerConfig.appConfig.sessionTimeout;
  }
  routerConfig.appConfig.mergePluginsIntoRoutes(routerConfig.plugins);

  var app = connect();
  var sessionSecret = cookieUtils.generateSessionSecret();

  app.use(logging.getExpressMiddleware());
  app.use(traceRequestMiddleware);
  app.use(passport.initialize());
  app.use(passport.session());

  var memoryStore = memstoreConfig.getMemoryStore(routerConfig);
  var cookieName = cookieUtils.getSessionCookieName();

  app.set('cookieName', cookieName);
  app.set('memoryStore', memoryStore);
  app.set('routerConfig', routerConfig);
  app.set('sessionCookieKey', sessionSecret);
  app.set('trust proxy', true);

  app.use(session({
    name: cookieName,
    resave: false,
    saveUninitialized: true, // We need to save uninitialized sessions to establish them even if a client did not login
    secret: sessionSecret,
    store: memoryStore
  }));
  app.use(secureCookieMiddleware);
  app.use(additionalHeadersMiddleware);
  app.use(welcomePageMiddleware);
  app.use(pathRewritingMiddleware);

  app.use(routerConfig.appConfig.login.callbackEndpoint, passportMiddleware);
  app.use(loginMiddleware);
  if (environmentSettings.jwtRefresh !== 0) {
    app.use(jwtRefreshMiddleware);
  }
  app.use(authorizationMiddleware);
  app.use(xsrfTokenMiddleware);

  var metadataEndpointOptions = routerConfig.appConfig.pluginMetadataEndpoint;
  metadataEndpointOptions && app.use(metadataEndpointOptions, pluginEndpointMiddleware);

  var logout = routerConfig.appConfig.logout;
  logout && logout.logoutEndpoint && app.use(logout.logoutEndpoint, logoutMiddleware);

  var whitelistService = routerConfig.appConfig.whitelistService;
  whitelistService && app.use(whitelistService.endpoint, whitelistServiceMiddleware);

  app.use(urlCheckMiddleware);

  var compressionOptions = routerConfig.appConfig.compression;
  compressionOptions.enabled && app.use(compressionMiddleware(compressionOptions));

  app.use(staticResourceHandler);
  app.use(sessionCookieMiddleware(cookieName));

  app.use(requestHandler);

  app.use(errorHandler);

  return app;
};
