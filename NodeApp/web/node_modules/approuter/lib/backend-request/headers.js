'use strict';

var _ = require('lodash');
var url = require('url');
var headerUtil = require('../utils/header-util');

var hopByHopHeaders = ['connection', 'keep-alive',
  'public',
  'proxy-authenticate',
  'transfer-encoding',
  'upgrade',
  'sec-websocket-key'];

var blacklistedHeaders = ['host'];

exports.getHeaders = function (req, oauthToken, destination) {
  var headers;
  if (req) {
    headers = req.headers;
    oauthToken = oauthToken || (req.session && req.session.oauthToken);
    destination = destination || req.internalUrl.destination;

    headers = removeHopByHopHeaders(headers);
    headers = addXForwardingHeaders(headers, req);
    // remove the header after it is used to create the XForwardingHeaders
    headers = removeBlackListedHeaders(headers);
    headerUtil.updateSapPassport(headers);
  }
  return addOauthHeader(headers || {}, oauthToken, destination);

};

function removeHopByHopHeaders(headers) {
  return _.omit(headers, hopByHopHeaders);
}

function removeBlackListedHeaders(headers) {
  return _.omit(headers, blacklistedHeaders);
}

function addOauthHeader(headers, oauthToken, destination) {
  if (oauthToken && destination && !!destination.forwardAuthToken) {
    headers.authorization = 'Bearer ' + oauthToken.accessToken;
  }
  return headers;
}

function addXForwardingHeaders(headers, req) {
  if (headers.host) {
    headers['x-forwarded-host'] = headers.host;
  }
  if (!headers['x-forwarded-proto'] && req.protocol) {
    headers['x-forwarded-proto'] = req.protocol;
  }
  if (!headers['x-forwarded-for']) {
    headers['x-forwarded-for'] = req.connection.remoteAddress;
  }
  if (!headers['x-forwarded-path']) {
    headers['x-forwarded-path'] = url.parse(req.url).pathname;
  }

  return headers;
}
