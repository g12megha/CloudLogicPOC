'use strict';

var _ = require('lodash');
var VError = require('verror').VError;
var logger = require('../utils/logger').getLogger('/Configuration');
var vcapUtils = require('../utils/vcap-utils');
var validators = require('./validators');
var localConfig = require('./local-config');

var envDestinations;

module.exports = {

  loadDestinations: function(fileName) {
    var destinations = load('destinations', fileName);
    if (destinations) {
      validators.validateEnvDestinations(destinations);
      applyDestinationDefaults(destinations);
      envDestinations = _.indexBy(destinations, 'name');
      return envDestinations;
    }
    logger.info('Using empty destinations to run');
    return {};
  },

  loadEnvironment: function () {
    var sessionTimeout = load('SESSION_TIMEOUT');

    var jwtRefresh = load('JWT_REFRESH');
    var environmentSettings = {
      sessionTimeout: sessionTimeout,
      jwtRefresh: jwtRefresh
    };

    environmentSettings = _.pick(environmentSettings, function (propertyValue) {
      return (propertyValue || propertyValue === '' || propertyValue === 0);
    });

    var sendXFrameOptions = load('SEND_XFRAMEOPTIONS');
    environmentSettings.sendXFrameOptions = (typeof sendXFrameOptions !== 'undefined') ? sendXFrameOptions : true;

    validators.validateEnvironmentSettings(environmentSettings);
    if (!environmentSettings.hasOwnProperty('jwtRefresh')) {
      environmentSettings.jwtRefresh = 5; // 5 is the default jwtRefresh
    }
    return environmentSettings;
  },

  loadPlugins: function(fileName) {
    var plugins = load('plugins', fileName);
    if (plugins) {
      validators.validatePlugins(plugins, envDestinations);
      plugins.forEach(function(currentPlugin) {
        currentPlugin.source = new RegExp(currentPlugin.source);
      });

      return plugins;
    }

    return null;
  },

  loadAdditionalHeaders: function(fileName) {
    var additionalHeaders = load('httpHeaders', fileName);
    if (additionalHeaders) {
      validators.validateHeaders(additionalHeaders);
      return additionalHeaders;
    }

    return [];
  },

  loadClickjackCheckWhitelist: function() {
    var whitelist = load('CJ_PROTECT_WHITELIST');
    if (whitelist) {
      validators.validateWhitelist(whitelist);
      whitelist.forEach(function(item) {
        if (typeof item.port === 'string') {
          item.port = parseInt(item.port);
        }
      });

      return whitelist;
    }

    return null;
  }
};

function load(cloudEnvVariableName, localFile) {
  if (typeof process.env[cloudEnvVariableName] !== 'undefined') {
    try {
      return JSON.parse(process.env[cloudEnvVariableName]);
    } catch (e) {
      throw new VError(e, 'Invalid value for environment variable %s', cloudEnvVariableName);
    }
  }

  if (!vcapUtils.isLocal()) {
    return;
  }

  return localConfig.readLocalJsonConfig(localFile, cloudEnvVariableName);
}

function applyDestinationDefaults(destinations) {
  destinations.forEach(function(dest) {
    _.defaults(dest, {
      timeout: 30000
    });
  });
}
