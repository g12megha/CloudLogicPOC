'use strict';

var basicAuthHeaderParser = require('basic-auth');
var oauthConfig = require('./../passport/oauth-configuration');
var passport = require('passport');
var pathUtil = require('../utils/path-util.js');
var environment = require('../environment.js');
var xhr = require('../xhr-login/xhr');

module.exports = {
  isLoginRequired: function (req, routerConfig) {
    var authenticationMethod = routerConfig.appConfig.authenticationMethod;
    if (authenticationMethod === 'none') {
      return false;
    }
    if (req.internalUrl && req.internalUrl.route.authenticationType === 'none') {
      return false;
    }
    if (pathUtil.isPublicPath(req, routerConfig.appConfig)) {
      return false;
    }
    if (!req.session || !req.session.oauthToken || !req.session.oauthToken.accessToken || !req.session.oauthToken.expiryDate) {
      return true;
    }
    if (req.session.oauthToken.expiryDate > Date.now()) {
      return false;
    }

    return true;
  },

  getAuthenticator: function (req, routerConfig) {
    var localServiceConfigPath = environment.getLocalServiceConfigPath(routerConfig.workingDir);
    var oauthStrategy;
    var passportAuthOptions;

    if (pathUtil.isBasicAuthProtectedPath(req)) {
      var basicAuthHeader = basicAuthHeaderParser(req);
      if (!basicAuthHeader) {
        throw 401;
      } else {
        oauthStrategy = oauthConfig.getBasicOauthStrategy(req, basicAuthHeader.name, basicAuthHeader.pass, localServiceConfigPath);
      }
    } else {
      oauthStrategy = oauthConfig.getXSUAAOauthStrategy(req, localServiceConfigPath);
      passportAuthOptions = (xhr.isXhrLogin(req)) ? { failWithError: true } : null;
    }

    if (oauthStrategy) {
      passport.use(oauthStrategy);
      passport.serializeUser(oauthConfig.getUserSerializer);
      passport.deserializeUser(oauthConfig.getUserDeserializer);
      return passport.authenticate('oauth2', passportAuthOptions);
    }
    throw new Error('A login is required but the uaa configuration is broken or missing');
  }
};
