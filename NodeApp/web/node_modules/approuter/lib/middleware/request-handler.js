'use strict';

var cookies = require('../backend-response/cookie-handler');
var backendOptions = require('../backend-request/options');
var traceUtil = require('../utils/trace-util');

module.exports = function requestHandler(req, res) {
  var logger = req.loggingContext.getLogger('/Routing');
  var tracer = req.loggingContext.getTracer();
  var url = req.internalUrl;
  var backendRequest = backendOptions.getRequest(req);
  var clientReq = backendRequest();

  if (req.internalUrl.destination.timeout) {
    clientReq.setTimeout(req.internalUrl.destination.timeout);
  }
  clientReq.on('timeout', function () {
    clientReq.abort();
    logger.error('Request to %s failed with a timeout', url.href);
    returnGateWayTimeout(res);
  });
  clientReq.on('error', function (err) {
    logger.error(err, 'Error while forwarding request to %s', url.href);
    returnGateWayError(res, err);
  });
  req.on('error', function (err) {
    logger.error(err, 'Error in reading from incoming request while forwarding to %s', url.href);
    returnGateWayError(res, err);
  });
  req.pipe(clientReq);

  clientReq.on('response', function (clientRes) {
    traceUtil.traceBackendResponse(tracer, clientRes);
    for (var headerName in clientRes.headers) {
      res.setHeader(headerName, clientRes.headers[headerName]);
    }
    cookies.storeSessionCookies(url.href, clientRes.headers, req);
    res.statusCode = clientRes.statusCode;
    res.statusMessage = clientRes.statusMessage;
    if (req.internalUrl.destination.timeout) {
      clientRes.setTimeout(req.internalUrl.destination.timeout);
    }
    clientRes.on('timeout', function () {
      clientReq.abort();
      logger.error('Response from %s failed with a timeout', url.href);
      returnGateWayTimeout(res);
    });
    clientRes.on('error', function (err) {
      logger.error(err, 'Error while reading from incoming response (backend request to %s)', url.href);
      returnGateWayError(res, err);
    });
    res.on('error', function (err) {
      logger.error(err, 'Error while sending data to outgoing response (backend request to %s)', url.href);
      returnGateWayError(res, err);
    });
    traceUtil.traceOutgoingResponse(tracer, res);
    clientRes.pipe(res);
  });
};

function returnGateWayError(res, err) {
  if (!res.headersSent) {
    res.writeHead(502); // Bad Gateway
    res.end(err.message);
  }
}

function returnGateWayTimeout(res) {
  if (!res.headersSent) {
    res.writeHead(504);
    res.end('ETIMEDOUT');
  }
}
