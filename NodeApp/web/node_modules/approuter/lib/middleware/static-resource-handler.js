'use strict';

var _ = require('lodash');
var fs = require('fs');
var http = require('http');
var mustache = require('mustache');
var path = require('path');
var serveStatic = require('serve-static');

var contentTypeUtil = require('../utils/content-type');

module.exports = function staticResourceHandler(req, res, next) {
  if (!req.internalUrl.route || !req.internalUrl.route.localDir) {
    return next();
  }

  var app = req.app;
  var routerConfig = app.get('routerConfig');
  var tracer = req.loggingContext.getTracer();
  var url = req.internalUrl;
  var fullDirName = path.join(routerConfig.workingDir, url.route.localDir);
  tracer.info('[STATIC] Serving static path:', fullDirName);

  var replacements = url.route.replace;
  if (!replacements) {
    return serveStaticContent(fullDirName, req, res, url);
  }
  if (_.endsWith(url.path, '/')) {
    url.path += 'index.html';
  }
  var filePath = path.join(fullDirName, url.path);

  return fs.realpath(filePath, function (err, resolvedPath) {
    if (err) {
      tracer.debug('Error during fs.realpath:', err);
      res.writeHead(404);
      res.end(http.STATUS_CODES[404]);
      return;
    }
    if (!_.startsWith(resolvedPath, fullDirName)) {
      res.writeHead(403);
      res.end(http.STATUS_CODES[403]);
      return;
    }
    var isMatching = replacements.pathSuffixes.some(function (suffix) {
      return _.endsWith(url.path, suffix);
    });
    if (isMatching) {
      serveReplacedFile(resolvedPath, req, res, replacements.varsMap);
    } else {
      serveStaticContent(fullDirName, req, res, url);
    }
  });
};

function serveStaticContent(fullDirName, req, res, url) {
  var logger = req.loggingContext.getLogger('/Routing');
  if (url.path === '') {
    req.url = path.join(url.path, path.sep);
  } else {
    req.url = url.path;
  }
  serveStatic(fullDirName, { 'fallthrough': false })(req, res, function (e) {
    if (e && e.status !== 404) {
      logger.error('Request to', req.originalUrl, 'failed on response with:', e.status, e);
      res.writeHead(e.status);
      res.end(http.STATUS_CODES[e.status]);
    } else {
      res.writeHead(404);
      res.end(http.STATUS_CODES[404]);
    }
  });
}

function serveReplacedFile(url, req, res, vars) {
  var logger = req.loggingContext.getLogger('/Routing');
  fs.readFile(url, 'utf8', function (err, data) {
    if (err) {
      res.writeHead(404);
      res.end(http.STATUS_CODES[404]);
      return logger.info(err);
    }
    res.setHeader('Content-Type', contentTypeUtil.getContentType(url));
    res.end(mustache.render(data, vars));
  });
}
