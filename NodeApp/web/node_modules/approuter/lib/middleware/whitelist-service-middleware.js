'use strict';

var URL = require('url');
var querystring = require('querystring');


module.exports = function (req, res, next) {
  if (req.method !== 'GET') {
    return next();
  }

  var whitelist = req.app.get('routerConfig').clickjackCheckWhitelist;
  if (!whitelist) {
    return sendServiceDisabledResult(res);
  }

  var parentOrigin = getParentOrigin(req);
  if (typeof parentOrigin !== 'string') {
    return sendResult(res, 'null', false);
  }

  var isMatching = matchWhitelist(whitelist, parentOrigin);
  sendResult(res, parentOrigin, isMatching);
};

function matchWhitelist(whitelist, parentOrigin) {
  var url = URL.parse(parentOrigin);
  if (!url.protocol || !url.host) {
    return false;
  }

  var checkUrl = url.protocol + '//' + url.host;
  return getMatchers(whitelist).some(function(matcher) {
    return matcher.test(checkUrl);
  });
}

function getMatchers(whitelist) {
  return whitelist.map(createRegExFromItem);
}

function createRegExFromItem(item) {
  var regex = item.protocol || '[A-Za-z]{2,9}';
  regex += '(:\/\/)';
  regex += item.host.replace(/\./g, '\\.').replace('*', '.*') ;
  regex += item.port ? ':' + item.port : '';
  regex += '$';
  return new RegExp(regex, 'i');
}

function getParentOrigin(req) {
  var requestUrl = URL.parse(req.url);
  if (requestUrl.query) {
    return querystring.parse(requestUrl.query)['parentOrigin'];
  }
  return null;
}

function sendServiceDisabledResult(res) {
  send(res, {
    version: '1.0',
    active: false,
    framing: true
  });
}

function sendResult(res, origin, isMatching) {
  send(res, {
    version: '1.0',
    active: true,
    origin: origin,
    framing: isMatching
  });
}

function send(res, result) {
  res.writeHead(200, { 'content-type': 'application/json' });
  return res.end(JSON.stringify(result));
}

