'use strict';

var Strategy = require('passport-strategy');
var agents = require('../backend-request/agents');
var urlUtils = require('../utils/url-utils');
var request = require('request');
var util = require('util');


function BasicOAuth2Strategy(options, verify) {
  if (!verify) {
    throw new TypeError('BasicOAuth2Strategy requires a verify callback');
  }
  if (!options.tokenURL) {
    throw new TypeError('BasicOAuth2Strategy requires a tokenURL option');
  }
  if (!options.username) {
    throw new TypeError('BasicOAuth2Strategy requires a username option');
  }
  if (!options.password) {
    throw new TypeError('BasicOAuth2Strategy requires a password option');
  }
  if (!options.clientID) {
    throw new TypeError('BasicOAuth2Strategy requires a clientID option');
  }
  if (!options.clientSecret) {
    throw new TypeError('BasicOAuth2Strategy requires a clientSecret option');
  }

  this.name = 'oauth2';
  this._verify = verify;
  this._options = options;

  Strategy.call(this, options, verify);
}

util.inherits(BasicOAuth2Strategy, Strategy);

BasicOAuth2Strategy.prototype.authenticate = function (req) {
  var self = this;

  var tracer = req.loggingContext.getTracer();
  var logger = req.loggingContext.getLogger('/OAuth');

  function verified(err, user, info) {
    if (err) {
      return self.error(err);
    }
    if (!user) {
      return self.fail(info);
    }
    self.success(user, info);
  }

  var requestOption = {
    method: 'POST',
    uri: this._options.tokenURL,
    agent: agents.get(urlUtils.extractProtocol(this._options.tokenURL)),
    headers: this._options.customHeaders,
    form: {
      username: this._options.username,
      password: this._options.password,
      grant_type: 'password' // eslint-disable-line camelcase
    }
  };
  request(requestOption, function (error, response, data) {

    // Check for error
    if (error) {
      logger.error('Basic authentication error:', error);
      return self.fail({message: 'Basic authentication failed'}, 500);
    }

    // Check for right status code
    if (response.statusCode !== 200) {
      tracer.debug('Basic authentication: Invalid Status Code Returned:', response.statusCode);
      return self.fail({message: 'Basic authentication failed'}, response.statusCode);
    } else {
      try {
        // As of http://tools.ietf.org/html/draft-ietf-oauth-v2-07
        // responses should be in JSON
        var results = JSON.parse(data);
        self._verify(req, results.access_token, results.refresh_token, results, {}, verified);
      }
      catch (e) {
        var msg = 'Failed to parse UAA response to JSON object';
        logger.error(msg + ':', e);
        return self.fail({message: 'Failed to parse UAA response to JSON object'}, 500);
      }
    }
  });
};

module.exports = BasicOAuth2Strategy;
