'use strict';

var _ = require('lodash');
var headerUtil = require('../utils/header-util.js');
var uaaUtils = require('../utils/uaa-utils');
var urlUtils = require('../utils/url-utils');


module.exports = {
  secureCookie: function (req) {
    var secure;
    switch (process.env.SECURE_SESSION_COOKIE) {
    case 'true':
      secure = true;
      break;
    case 'false':
      secure = false;
      break;
    default:
      secure = req.protocol !== 'http';
    }
    req.session.cookie.secure = secure;
  },

  storeToken: function(req, accessToken, refreshToken, params, profile, done) {
    var locationAfterLogin = req.session.locationAfterLogin;

    req.session.regenerate(function(err) {
      module.exports.secureCookie(req);
      var options = { accessToken: accessToken, refreshToken: refreshToken, expiresIn: params.expires_in, scope: params.scope };

      module.exports.setTokenToSession(req.session, options);
      req.session.locationAfterLogin = locationAfterLogin;
      req.session.save();

      var user = { name: 'approuter does not require that, but passport does' };
      done(err, user);
    });
  },

  setTokenToSession: function(session, token) {
    session.oauthToken = {
      accessToken: token.accessToken,
      expiryDate: module.exports.getExpiresAt(token.expiresIn).getTime(),
      refreshToken: token.refreshToken
    };
    session.oauthScopes = (token.scope) ? token.scope.trim().split(' ') : [];
  },

  getExpiresAt: function(duration) {
    // respect network latency if possible
    var expiresIn;
    if (duration > 180) {
      expiresIn = duration - 120;
    } else {
      expiresIn = duration;
    }
    return new Date(new Date().getTime() + expiresIn * 1000);
  },

  getCallBackUrl: function(req) {
    var appRouterUrl = urlUtils.buildAppRouterUrl(req);
    var loginCallback = req.app.get('routerConfig').appConfig.login.callbackEndpoint;
    return urlUtils.join(appRouterUrl, loginCallback);
  },

  loadOauthOptions: function(req, localServiceConfig, cfEnvFromFile) {
    var options = uaaUtils.getOptions(localServiceConfig, cfEnvFromFile);

    options.callbackURL = this.getCallBackUrl(req);
    options.passReqToCallback = 'true';
    options.customHeaders = headerUtil.getBasicAuthHeader(options.clientID, options.clientSecret);
    headerUtil.updateSapPassport(req.headers, options.customHeaders);
    return options;
  },

  matchesUaa: function (service) {
    var uaaName = process.env.UAA_SERVICE_NAME;
    if (uaaName) {
      return service.name === uaaName;
    }

    if (service.tags && _.contains(service.tags, 'xsuaa')) {
      return true;
    }
    if (service.label === 'user-provided' && service.credentials.tags && _.contains(service.credentials.tags, 'xsuaa')) {
      return true;
    }
    return false;
  }
};
