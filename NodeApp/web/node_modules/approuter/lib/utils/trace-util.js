'use strict';

var headersNotToTrace = ['authorization', 'cookie', 'set-cookie'];

exports.traceIncomingRequest = function (tracer, req) {
  if (tracer.isEnabled('debug')) {
    tracer.debug('Incoming request to AppRouter. Path:', req.url, 'Method:', req.method, 'Headers:', stringifyHeaders(req.headers));
  }
};

exports.traceBackendRequest = function (tracer, url, requestOptions) {
  if (tracer.isEnabled('debug')) {
    tracer.debug('Request to backend. Rewritten URL:', url, 'Method:', requestOptions.method, 'Headers:', stringifyHeaders(requestOptions.headers));
  }
};

exports.traceBackendResponse = function (tracer, backendRes) {
  if (tracer.isEnabled('debug')) {
    tracer.debug('Response from backend. Status:', backendRes.statusCode, 'Headers:', stringifyHeaders(backendRes.headers));
  }
};

exports.traceOutgoingResponse = function (tracer, res) {
  if (tracer.isEnabled('debug')) {
    tracer.debug('Response from AppRouter. Status:', res.statusCode, 'Headers:', stringifyHeaders(res._headers));
  }
};

function stringifyHeaders(headers) {
  var loggedHeader = {};
  for (var header in headers) {
    if (headers.hasOwnProperty(header)) {
      if (headersNotToTrace.indexOf(header) !== -1) {
        loggedHeader[header] = '***';
      } else {
        loggedHeader[header] = headers[header];
      }
    }
  }
  return JSON.stringify(loggedHeader, null, 2);
}
