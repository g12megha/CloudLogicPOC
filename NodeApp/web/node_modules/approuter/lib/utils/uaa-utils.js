'use strict';

var _ = require('lodash');
var xsenv = require('sap-xsenv');
var logger = require('./logger').getLogger('/Configuration');
var vcapUtils = require('./vcap-utils');

module.exports = {
  getOptions: function (localServiceConfig, cfEnvFromFile) {
    xsenv.loadEnv(cfEnvFromFile);
    var options;
    if (vcapUtils.isLocal()) {
      options = module.exports.getCloudOrLocalOptions(localServiceConfig);
    } else {
      options = module.exports.getCloudOrLocalOptions();
    }
    return options;
  },

  getCloudOrLocalOptions: function (localServiceConfig) {
    var uaa;
    try {
      // If localServiceConfig is undefined we get services from cloud options, otherwise we take them from local config
      uaa = xsenv.getServices({ uaa: module.exports.matchesUaa }, localServiceConfig).uaa;
    }
    catch (e) {
      logger.error('Cannot find service uaa in environment. Details: "' + e.message + '"');
    }

    if (uaa) {
      return {
        authorizationURL: _.trimRight(uaa.url, '/') + '/oauth/authorize',
        tokenURL: _.trimRight(uaa.url, '/') + '/oauth/token',
        logoutURL: _.trimRight(uaa.url, '/') + '/logout.do',
        clientID: uaa.clientid,
        clientSecret: uaa.clientsecret,
        xsappname: uaa.xsappname
      };
    }
    return {};
  },

  matchesUaa: function (service) {
    var uaaName = process.env.UAA_SERVICE_NAME;
    if (uaaName) {
      return service.name === uaaName;
    }

    if (service.tags && _.contains(service.tags, 'xsuaa')) {
      return true;
    }
    if (service.label === 'user-provided' && service.credentials.tags && _.contains(service.credentials.tags, 'xsuaa')) {
      return true;
    }
    return false;
  }
};
