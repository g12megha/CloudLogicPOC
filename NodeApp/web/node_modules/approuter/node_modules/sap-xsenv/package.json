{
  "_args": [
    [
      {
        "raw": "sap-xsenv@1.2.2",
        "scope": null,
        "escapedName": "sap-xsenv",
        "name": "sap-xsenv",
        "rawSpec": "1.2.2",
        "spec": "1.2.2",
        "type": "version"
      },
      "C:\\Users\\d062804\\Documents\\NodeApp\\web\\node_modules\\approuter"
    ]
  ],
  "_from": "sap-xsenv@1.2.2",
  "_id": "sap-xsenv@1.2.2",
  "_inCache": true,
  "_location": "/approuter/sap-xsenv",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "email": "xmake@sap.com",
    "name": "deploy.releases.npm"
  },
  "_npmVersion": "2.10.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sap-xsenv@1.2.2",
    "scope": null,
    "escapedName": "sap-xsenv",
    "name": "sap-xsenv",
    "rawSpec": "1.2.2",
    "spec": "1.2.2",
    "type": "version"
  },
  "_requiredBy": [
    "/approuter"
  ],
  "_resolved": "http://nexus.wdf.sap.corp:8081/nexus/repository/build.milestones.npm/sap-xsenv/-/sap-xsenv-1.2.2.tgz",
  "_shasum": "a07cc9b8f5f5e46b8226da00cb8be912bce4c78f",
  "_shrinkwrap": {
    "version": "1.2.2",
    "name": "sap-xsenv",
    "dependencies": {
      "debug": {
        "version": "2.2.0",
        "dependencies": {
          "ms": {
            "version": "0.7.1"
          }
        }
      },
      "verror": {
        "version": "1.6.0",
        "dependencies": {
          "extsprintf": {
            "version": "1.2.0"
          }
        }
      }
    }
  },
  "_spec": "sap-xsenv@1.2.2",
  "_where": "C:\\Users\\d062804\\Documents\\NodeApp\\web\\node_modules\\approuter",
  "dependencies": {
    "debug": "2.2.0",
    "verror": "1.6.0"
  },
  "description": "Utility for easy setup and access of SAP HANA XS Advanced environment variables",
  "devDependencies": {
    "eslint": "1.4.3",
    "istanbul": "0.3.14",
    "lodash": "3.10.1",
    "mocha": "2.2.5",
    "node-style": "1.1.2",
    "should": "7.1.1",
    "whitelist-for-node-packages": "0.1.3"
  },
  "dist": {
    "shasum": "a07cc9b8f5f5e46b8226da00cb8be912bce4c78f",
    "tarball": "http://nexus.wdf.sap.corp:8081/nexus/repository/build.milestones.npm/sap-xsenv/-/sap-xsenv-1.2.2.tgz"
  },
  "engines": {
    "node": ">=0.12.x"
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "deploy.releases.npm",
      "email": "xmake@sap.com"
    }
  ],
  "name": "sap-xsenv",
  "optionalDependencies": {},
  "readme": "# sap-xsenv\n\nUtility for easy setup and access of SAP HANA XS Advanced environment variables.\n\nSAP HANA XS Advanced apps take various configurations from the environment.\nFor example Cloud Foundry provides properties of bound services in [VCAP_SERVICES](http://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) variable.\n\nTo test locally you need to provide these configurations by yourself. This package allows you to provide default configurations in a separate configuration file.\n* This reduces clutter by removing configuration data from the app code.\n* You don't have to set env vars manually each time you start your app.\n* Different developers can use their own configurations for their local tests without changing files under source control. Just add this configuration file to `.gitignore` and `.cfignore`.\n\nCurrently you can provide default configurations on two levels:\n* For Cloud Foundry services via `getServices()` and `default-services.json`\n* For any environment variable via `loadEnv()` and `default-env.json`\n\nWhile here we often reference Cloud Foundry, it all applies also to SAP HANA XS Advanced On-premise Runtime which emulates Cloud Foundry as much as possible.\n\n### Service Lookup\n\nHere is an example how to lookup specific Cloud Foundry services bound to your application:\n```js\nvar xsenv = require('sap-xsenv');\n\nvar services = xsenv.getServices({\n  hana: { tag: 'hdb' },\n  scheduler: function(service) { return service.label === 'jobs' }\n});\n\nvar hanaCredentials = services.hana;\nvar schedulerCredentials = services.scheduler;\n```\nThe search criteria for the required services is specified via the query parameter to `getServices`.\nEach property of the query object specifies the query value for one service.\nSee [filterCFServices](#filtercfservices) below for description of the supported query values.\n\nTo test this locally, create a file called `default-services.json` in the working directory of your application.\nThis file should contain something like this:\n```json\n{\n  \"hana\": {\n    \"host\": \"localhost\",\n    \"port\": \"30015\",\n    \"user\": \"SYSTEM\",\n    \"password\": \"secret\"\n  },\n  \"scheduler\": {\n    \"host\": \"localhost\",\n    \"port\": \"4242\",\n    \"user\": \"my_user\",\n    \"password\": \"secret\"\n  }\n}\n```\nNotice that the result property names (`hana` and `scheduler`) are the same as those in the query object and also those in `default-services.json`.\n\nFor each requested service `getServices` first looks in [VCAP_SERVICES](http://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) variable and then in `default-services.json` file.\n\nThis will throw an error if some of the requested services could not be found.\nThis way you will find right away if some required service is missing.\n\nNote: `getServices` will return only the requested services. It will not return any of the standard SAP HANA XS Advanced services (hana, uaa, jobs) unless they are explicitly specified in the query parameter.\n\nYou can also pass a custom file to load default service configuration from:\n```js\nvar xsenv = require('sap-xsenv');\n\nvar services = xsenv.getServices({\n  hana: { tag: 'hana' },\n  uaa: { tag: 'uaa' }\n}, 'my-services.json');\n```\nThis will load defaults from `my-services.json` instead of `default-services.json`.\n\n#### User-Provided Service Instances\n\nWhile this package can look up any kind of bound service instances, you should be aware that [User-Provided Service Instances](https://docs.cloudfoundry.org/devguide/services/user-provided.html) have less properties than managed service instances. Here is an example:\n```json\n  \"VCAP_SERVICES\": {\n    \"user-provided\": [\n      {\n        \"name\": \"pubsub\",\n        \"label\": \"user-provided\",\n        \"tags\": [],\n        \"credentials\": {\n          \"binary\": \"pubsub.rb\",\n          \"host\": \"pubsub01.example.com\",\n          \"password\": \"p@29w0rd\",\n          \"port\": \"1234\",\n          \"username\": \"pubsubuser\"\n        },\n        \"syslog_drain_url\": \"\"\n\t  }\n    ]\n  }\n```\nAs you can see the only usable property is the `name`.\n\n#### Best practice\n\nThe recommended and most reliable way to lookup a service is by using its instance name which is unique.\n```js\nxsenv.getServices({\n  hana: process.env.HANA_SERVICE_NAME,\n  uaa: process.env.UAA_SERVICE_NAME\n})\n```\nOf course you have to set HANA_SERVICE_NAME and UAA_SERVICE_NAME in the environment to same values you use to bind the respective services (in `manifest.yml` or via `cf bind-service`).\n\n#### filterCFServices\n\n`filterCFServices` scans the services in VCAP_SERVICES and returns only those\nthat match the given criteria.\nIt always returns an array of matching service instances.\nIf no matching services are found, it returns an empty array.\n\nYou can lookup a service by its instance name (the name you use to bind the service):\n```js\nvar hanas = xsenv.filterCFServices({ name: 'hana' });\nif (hanas.length > 0) {\n  connect(hanas[0].credentials);\n}\n```\n**Note:** Do not confuse the instance name (`name` property) with service name (`label` property).\nSince you can have multiple instances of the same service bound to your app,\ninstance name is unique while service name is not.\nFor this reason the recommended approach is to look up services by instance name.\nSo for this common case there is even simpler syntax:\n```js\nxsenv.filterCFServices('hana');\n```\nThis call will return an aray of one element or an empty array, if not found.\n\nYou can also look up a service by tag:\n```js\nxsenv.filterCFServices({ tag: 'relational' });\n```\nThis looks for service instances that have the given tag.\n\nIf you need, you can match several properties:\n```js\nxsenv.filterCFServices({ label: 'hana', plan: 'shared' });\n```\nThis will return the services where _all_ of the given properties match.\n\nIf you need more contrived search criteria, you can pass a custom filter function:\n```js\nxsenv.filterCFServices(function(service) {\n  return /shared/.test(service.plan) && /hdi/.test(service.label);\n});\n```\n\n##### Service Query\n\nBoth `getServices` and `filterCFServices` use the same service query values.\n\nQuery value | Description\n------------|------------\n{string}    | Matches the service with the same service instance name (`name` property). Same as { name: '&lt;string&gt;' }.\n{object}    | All properties of the given object should match corresponding service instance properties as they appear in VCAP_SERVICES. See below.\n{function}  | A function that takes a service object as argument and returns `true` only if it is considered a match\n\nIf an object is given as a query value, it may have the following properties:\n\nProperty | Description\n---------|------------\n`name`   | Service instance name - the name you use to bind the service\n`label`  | Service name - the name shown by `cf marketplace`\n`tag`    | Should match any of the service tags\n`plan`   | Service instance plan - the plan you use in `cf create-service`\n\n\n#### cfServiceCredentials\n\n`cfServiceCredentials` function is a convenience wrapper over `filterCFServices`.\nIf exactly one service is found, it returns its `credentials` object.\nIf the requested service is not found or multiple instances are found, it throws an error.\n\n#### readCFServices\n\nVCAP_SERVICES contains arrays of service instances.\n`readCFServices` returns a flat object with all service instances as properties.\n```\n  \"VCAP_SERVICES\": {\n    \"hana\" : [ {\n      \"credentials\" : {\n        ...\n      },\n      \"label\" : \"hana\",\n      \"name\" : \"hana1\",\n      \"plan\" : \"shared\",\n      \"tags\" : [ \"hana\", \"relational\" ]\n    },\n    {\n      \"credentials\" : {\n        ...\n      },\n      \"label\" : \"hana\",\n      \"name\" : \"hana2\",\n      \"plan\" : \"shared\",\n      \"tags\" : [ \"hana\", \"relational\", \"SP09\" ]\n    } ]\n  }\n```\nThen `readCFServices` would return:\n```\n{\n  hana1: {\n    \"credentials\" : {\n      ...\n    },\n    \"label\" : \"hana\",\n    \"name\" : \"hana1\",\n    \"plan\" : \"shared\",\n    \"tags\" : [ \"hana\", \"relational\" ]\n  },\n  hana2: {\n    \"credentials\" : {\n      ...\n    },\n    \"label\" : \"hana\",\n    \"name\" : \"hana2\",\n    \"plan\" : \"shared\",\n    \"tags\" : [ \"hana\", \"relational\", \"SP09\" ]\n  }\n}\n```\nThis way it is easier to find a service instance.\n\n### Local environment setup\n\nFunction `xsenv.loadEnv()` loads the given JSON file (by default `default-env.json`),\nconverts each top-level property to a string and sets it in the respective env var,\nunless it is already set. So the file content acts like default values for env vars.\nHere is a sample `default-env.json` providing HANA and Job Scheduler configuration:\n```json\n{\n  \"PORT\": 3000,\n  \"VCAP_SERVICES\": {\n    \"hana\": [\n      {\n        \"credentials\": {\n          \"host\": \"myhana\",\n          \"port\": \"30015\",\n          \"user\": \"SYSTEM\",\n          \"password\": \"secret\"\n        },\n        \"label\": \"hana\",\n        \"name\": \"hana-R90\",\n        \"tags\": [\n          \"hana\",\n          \"database\",\n          \"relational\"\n        ]\n      }\n    ],\n    \"scheduler\": [\n      {\n        \"credentials\": {\n          \"host\": \"localhost\",\n          \"port\": \"4242\",\n          \"user\": \"jobuser\",\n          \"password\": \"jobpassword\"\n        },\n        \"label\": \"scheduler\",\n        \"name\": \"jobscheduler\",\n        \"tags\": [\n          \"scheduler\"\n        ]\n      }\n    ]\n  }\n}\n```\n\nThis allows you to easily setup locally the same environment as in Cloud Foundry and\nclean your code from conditional logic if it is running in CF or locally.\n\nYou can also use a different file name:\n```js\nxsenv.loadEnv('myenv.json');\n```\n\n### Loading SSL Certificates\n\nIf SSL is configured in XSA On-Premise Runtime, it will provide one or more\ntrusted CA certificates that applications can use to make SSL connections.\nIf present, the file paths of these certificates are listed in `XS_CACERT_PATH`\nenvironment variable separated by `path.delimiter` (`:` on LINUX and `;` on Windows).\n\n`loadCertificates(certPath)` function loads the certificates listed in `certPath`.\nIf this argument is not provided, it uses `XS_CACERT_PATH` environment variable instead.\nIf that is not set either, the function returns `undefined`.\nThe function returns an array even if a single certificate is provided.\n\nThis function is synchronous so it throws an error, if it cannot load some of\nthe listed files.\n\nFor example this code loads the trusted CA certificates so they are used for all\nsubsequent outgoing HTTPS connections:\n```js\nvar https = require('https');\nvar xsenv = require('sap-xsenv');\n\nhttps.globalAgent.options.ca = xsenv.loadCertificates();\n```\n\nThis function can be used also to load SSL certificates for HANA like this:\n```js\nvar hdb = require('hdb');\nvar xsenv = require('sap-xsenv');\n\nvar client = hdb.createClient({\n  host : 'hostname',\n  port : 30015,\n  ca   : xsenv.loadCertificates(),\n  ...\n});\n```\n\n`loadCaCert()` function loads the certificates listed in `XS_CACERT_PATH` environment variable\ninto [https.globalAgent](https://nodejs.org/api/https.html#https_https_globalagent) of Node.js.\nAll subsequent outgoing HTTPS connections will use these certificates to verify the certificate\nof the remote host. The verification should be successful if the certificate of the\nremote host is signed (directly or via some intermediary) by some of these trusted\ncertificates.\n\n**Note:** `loadCaCert` is **deprecated**. Use `loadCertificates` instead.\n\nIt is suggested to call this function once during the application startup.\n\n```js\nxsenv.loadCaCert();\n```\n\nIf `XS_CACERT_PATH` variable is not set, the function does nothing.\nThis function is synchronous.\nIt will throw an error if it cannot load some of the certificates.\n\n### Debugging\n\nSet `DEBUG=xsenv` in the environment to enable debug traces. See [debug](https://www.npmjs.com/package/debug) package for details.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "lint": "eslint -c node_modules/node-style/.eslintrc -f stylish lib/",
    "prepareRelease": "find $PWD -name package.json -exec node .filter/filter-package.js {} \\; ; rm -rf .filter && find $PWD -name bundle.json -exec node node_modules/whitelist-for-node-packages/clean-bundle.js {} --verbose \\; -print -quit && npm prune --production",
    "test": "make test"
  },
  "version": "1.2.2"
}
